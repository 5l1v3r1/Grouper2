// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

using System;
using System.Collections.Concurrent;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Grouper2
{
    public partial class Jankydb
    {
        [JsonProperty("knownAliases")] public KnownAlias[] KnownAliases;

        [JsonProperty("knownSids")] public KnownSid[] KnownSids;

        [JsonProperty("domainSidStartString")] public string DomainSidStartString;

        [JsonProperty("packageSearchData")] public PackageSearchData PackageSearchData;

        [JsonProperty("gpoSearchData")] public GpoSearchData GpoSearchData;

        [JsonProperty("daclData")] public DaclData DaclData;

        [JsonProperty("privRights")] public PrivRight[] PrivRights;

        [JsonProperty("trustees")] public Trustee[] Trustees;

        [JsonProperty("interestingExtensions")] public string[] InterestingExtensions;

        [JsonProperty("interestingWords")] public string[] InterestingWords;
    }

    public partial class DaclData
    {
        [JsonProperty("interestingRights")]
        public string[] InterestingRights { get; set; }

        [JsonProperty("boringSidEndings")]
        public string[] BoringSidEndings { get; set; }

        [JsonProperty("interestingSidEndings")]
        public string[] InterestingSidEndings { get; set; }
    }

    public partial class GpoSearchData
    {
        [JsonProperty("filter")]
        public string Filter { get; set; }
    }

    public partial class KnownAlias
    {
        [JsonProperty("abbreviation")]
        public string Abbreviation { get; set; }

        [JsonProperty("fullName")]
        public string FullName { get; set; }
    }

    public partial class KnownSid
    {
        [JsonProperty("sidStart")]
        public string SidStart { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }
    }

    public partial class PackageSearchData
    {
        [JsonProperty("filter")]
        public string Filter { get; set; }

        [JsonProperty("propertiesToLoad")]
        public string[] PropertiesToLoad { get; set; }
    }

    public partial class PrivRight
    {
        [JsonProperty("privRight")]
        public string PrivRightPrivRight { get; set; }

        [JsonProperty("interestLevel")]
        public object InterestLevel { get; set; }

        [JsonProperty("remotelyExploitable")]
        public bool? RemotelyExploitable { get; set; }
    }

    public partial class Trustee
    {
        [JsonProperty("SID")]
        public string Sid { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("domainTrustee")]
        public bool? DomainTrustee { get; set; }

        [JsonProperty("localTrustee")]
        public bool? LocalTrustee { get; set; }

        [JsonProperty("highPriv")]
        public bool? HighPriv { get; set; }

        [JsonProperty("lowPriv")]
        public bool? LowPriv { get; set; }
    }

    public enum IntValueEnum { Any };

    public partial struct IntValueUnion
    {
        public bool? Bool;
        public IntValueEnum? Enum;
        public long? Integer;

        public static implicit operator IntValueUnion(bool Bool) => new IntValueUnion { Bool = Bool };
        public static implicit operator IntValueUnion(IntValueEnum Enum) => new IntValueUnion { Enum = Enum };
        public static implicit operator IntValueUnion(long Integer) => new IntValueUnion { Integer = Integer };
        public bool IsNull => Bool == null && Integer == null && Enum == null;
    }

    public partial class Jankydb
    {
        public static Jankydb FromJson(string json) => JsonConvert.DeserializeObject<Jankydb>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Jankydb self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                IntValueUnionConverter.Singleton,
                IntValueEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            string value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            long value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class IntValueUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IntValueUnion) || t == typeof(IntValueUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new IntValueUnion { };
                case JsonToken.String:
                case JsonToken.Date:
                    string stringValue = serializer.Deserialize<string>(reader);
                    bool b;
                    if (Boolean.TryParse(stringValue, out b))
                    {
                        return new IntValueUnion { Bool = b };
                    }
                    if (stringValue == "Any")
                    {
                        return new IntValueUnion { Enum = IntValueEnum.Any };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new IntValueUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type IntValueUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            IntValueUnion value = (IntValueUnion)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Bool != null)
            {
                string boolString = value.Bool.Value ? "true" : "false";
                serializer.Serialize(writer, boolString);
                return;
            }
            if (value.Enum != null)
            {
                if (value.Enum == IntValueEnum.Any)
                {
                    serializer.Serialize(writer, "Any");
                    return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type IntValueUnion");
        }

        public static readonly IntValueUnionConverter Singleton = new IntValueUnionConverter();
    }

    internal class IntValueEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IntValueEnum) || t == typeof(IntValueEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            string value = serializer.Deserialize<string>(reader);
            if (value == "Any")
            {
                return IntValueEnum.Any;
            }
            throw new Exception("Cannot unmarshal type IntValueEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            IntValueEnum value = (IntValueEnum)untypedValue;
            if (value == IntValueEnum.Any)
            {
                serializer.Serialize(writer, "Any");
                return;
            }
            throw new Exception("Cannot marshal type IntValueEnum");
        }

        public static readonly IntValueEnumConverter Singleton = new IntValueEnumConverter();
    }
}
